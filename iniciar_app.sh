#!/bin/bash

# Script para iniciar facilmente a aplica√ß√£o Gestor de Tarefas
# Autor: Sistema Gestor de Tarefas
# Data: $(date +"%d/%m/%Y")

echo "üöÄ GESTOR DE TAREFAS - Inicializador Autom√°tico"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio da aplica√ß√£o
APP_DIR="/home/carloscorreia/Secret√°ria/Projetos/UFCD10791/GestorTarefas"
cd "$APP_DIR"

# Fun√ß√£o para verificar se um processo est√° rodando
check_process() {
    if pgrep -f "$1" > /dev/null; then
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para parar processos existentes
stop_existing_processes() {
    echo -e "${YELLOW}üõë Parando processos existentes...${NC}"
    
    # Parar backend
    if check_process "spring.profiles.active=backend"; then
        pkill -f "spring.profiles.active=backend"
        echo -e "${GREEN}   ‚úì Backend parado${NC}"
        sleep 2
    fi
    
    # Parar GUI
    if check_process "spring.profiles.active=gui"; then
        pkill -f "spring.profiles.active=gui"
        echo -e "${GREEN}   ‚úì Interface GUI parada${NC}"
        sleep 1
    fi
}

# Fun√ß√£o para compilar a aplica√ß√£o
compile_app() {
    echo -e "${BLUE}üî® Compilando aplica√ß√£o...${NC}"
    if mvn clean package -DskipTests -q; then
        echo -e "${GREEN}   ‚úì Compila√ß√£o conclu√≠da com sucesso${NC}"
        return 0
    else
        echo -e "${RED}   ‚úó Erro na compila√ß√£o${NC}"
        return 1
    fi
}

# Fun√ß√£o para iniciar o backend
start_backend() {
    echo -e "${BLUE}üñ•Ô∏è  Iniciando backend Spring Boot...${NC}"
    
    # Verificar se j√° est√° rodando
    if check_process "spring.profiles.active=backend"; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  Backend j√° est√° rodando${NC}"
        return 0
    fi
    
    # Iniciar backend em background
    nohup java -jar target/gestor-tarefas-1.0.0.jar --spring.profiles.active=backend > backend.log 2>&1 &
    
    # Aguardar inicializa√ß√£o
    echo -e "${YELLOW}   ‚è±Ô∏è  Aguardando inicializa√ß√£o...${NC}"
    
    for i in {1..25}; do
        if curl -s http://localhost:8080/api/users > /dev/null 2>&1; then
            echo -e "${GREEN}   ‚úì Backend iniciado com sucesso (${i}s)${NC}"
            return 0
        fi
        sleep 1
        echo -n "."
    done
    
    echo -e "${RED}   ‚úó Backend n√£o iniciou dentro do tempo esperado${NC}"
    return 1
}

# Fun√ß√£o para iniciar a GUI
start_gui() {
    echo -e "${BLUE}üñºÔ∏è  Iniciando interface gr√°fica...${NC}"
    
    # Verificar se j√° est√° rodando
    if check_process "spring.profiles.active=gui"; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  Interface j√° est√° rodando${NC}"
        return 0
    fi
    
    # Verificar se JAR existe
    if [ ! -f "target/gestor-tarefas-1.0.0.jar" ]; then
        echo -e "${RED}   ‚úó JAR n√£o encontrado. Execute compila√ß√£o primeiro.${NC}"
        return 1
    fi
    
    # Iniciar GUI em background
    java -Dspring.profiles.active=gui -jar target/gestor-tarefas-1.0.0.jar > gui.log 2>&1 &
    
    sleep 2
    
    if check_process "spring.profiles.active=gui"; then
        echo -e "${GREEN}   ‚úì Interface gr√°fica iniciada${NC}"
        return 0
    else
        echo -e "${RED}   ‚úó Erro ao iniciar interface gr√°fica${NC}"
        return 1
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    echo -e "${BLUE}üìä STATUS DA APLICA√á√ÉO:${NC}"
    echo "========================"
    
    if check_process "spring.profiles.active=backend"; then
        echo -e "${GREEN}üü¢ Backend: ATIVO (http://localhost:8080)${NC}"
    else
        echo -e "${RED}üî¥ Backend: INATIVO${NC}"
    fi
    
    if check_process "spring.profiles.active=gui"; then
        echo -e "${GREEN}üü¢ Interface: ATIVA${NC}"
    else
        echo -e "${RED}üî¥ Interface: INATIVA${NC}"
    fi
    
    echo ""
}

# Fun√ß√£o para mostrar informa√ß√µes de login
show_login_info() {
    echo -e "${BLUE}üë§ INFORMA√á√ïES DE LOGIN:${NC}"
    echo "========================="
    echo -e "${GREEN}Administradores:${NC}"
    echo "  ‚Ä¢ admin.correia / senha123"
    echo "  ‚Ä¢ martim.sottomayor / senha123"
    echo ""
    echo -e "${GREEN}Gerentes:${NC}"
    echo "  ‚Ä¢ lucile.almeida / senha123"
    echo "  ‚Ä¢ diana.brochado / senha123"
    echo ""
    echo -e "${GREEN}Funcion√°rios:${NC}"
    echo "  ‚Ä¢ monica.lewinsky / senha123"
    echo "  ‚Ä¢ rita.almeida / senha123"
    echo ""
}

# Menu principal
main_menu() {
    while true; do
        echo ""
        echo -e "${BLUE}üéØ MENU PRINCIPAL:${NC}"
        echo "=================="
        echo "1) üöÄ Iniciar tudo (Backend + Interface)"
        echo "2) üñ•Ô∏è  Iniciar apenas Backend"
        echo "3) üñºÔ∏è  Iniciar apenas Interface"
        echo "4) üõë Parar tudo"
        echo "5) üìä Ver status"
        echo "6) üë§ Ver informa√ß√µes de login"
        echo "7) üîÑ Recompilar e reiniciar"
        echo "8) ‚ùå Sair"
        echo ""
        read -p "Escolha uma op√ß√£o (1-8): " choice
        
        case $choice in
            1)
                stop_existing_processes
                if start_backend && start_gui; then
                    show_status
                    show_login_info
                fi
                ;;
            2)
                start_backend
                show_status
                ;;
            3)
                start_gui
                show_status
                ;;
            4)
                stop_existing_processes
                show_status
                ;;
            5)
                show_status
                ;;
            6)
                show_login_info
                ;;
            7)
                stop_existing_processes
                compile_app
                if start_backend && start_gui; then
                    show_status
                    show_login_info
                fi
                ;;
            8)
                echo -e "${GREEN}üëã At√© breve!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
                ;;
        esac
    done
}

# Verificar se o Maven est√° instalado
if ! command -v mvn &> /dev/null; then
    echo -e "${RED}‚ùå Maven n√£o encontrado. Por favor, instale o Maven primeiro.${NC}"
    exit 1
fi

# Verificar se o Java est√° instalado
if ! command -v java &> /dev/null; then
    echo -e "${RED}‚ùå Java n√£o encontrado. Por favor, instale o Java primeiro.${NC}"
    exit 1
fi

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pom.xml" ]; then
    echo -e "${RED}‚ùå Arquivo pom.xml n√£o encontrado. Execute este script do diret√≥rio raiz do projeto.${NC}"
    exit 1
fi

# In√≠cio autom√°tico se n√£o houver argumentos
if [ $# -eq 0 ]; then
    echo -e "${GREEN}üéØ Iniciando aplica√ß√£o automaticamente...${NC}"
    echo ""
    
    # Compilar primeiro
    if ! compile_app; then
        exit 1
    fi
    
    # Parar processos existentes
    stop_existing_processes
    
    # Iniciar backend e GUI
    if start_backend && start_gui; then
        show_status
        show_login_info
        echo ""
        echo -e "${GREEN}üéâ Aplica√ß√£o iniciada com sucesso!${NC}"
        echo -e "${YELLOW}üí° Para gerenciar a aplica√ß√£o, execute novamente: ./iniciar_app.sh menu${NC}"
    else
        echo -e "${RED}‚ùå Erro ao iniciar aplica√ß√£o${NC}"
        exit 1
    fi
elif [ "$1" = "menu" ]; then
    main_menu
elif [ "$1" = "stop" ]; then
    stop_existing_processes
elif [ "$1" = "status" ]; then
    show_status
else
    echo "Uso: $0 [menu|stop|status]"
    echo "  (sem argumentos): Inicia a aplica√ß√£o automaticamente"
    echo "  menu: Abre o menu interativo"
    echo "  stop: Para todos os processos"
    echo "  status: Mostra o status atual"
fi